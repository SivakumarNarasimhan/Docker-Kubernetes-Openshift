Sure! Let's create a Python Flask application that uses Kubernetes Secrets to store sensitive information, such as an API key, and deploy it as a service on Minikube. We'll create a Secret to store the API key and use it in the Flask application.

Step 1: Python Flask Application
Create a simple Python Flask application that reads the API key from an environment variable and displays it. Create a file named `app.py` with the following content:

```python
from flask import Flask
import os

app = Flask(__name__)

@app.route('/')
def get_api_key():
    api_key = os.environ.get("API_KEY", "No API Key found")
    return f"API Key: {api_key}"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
```

Step 2: Dockerize the Flask Application
Create a Dockerfile for the Flask application. Create a file named `Dockerfile` with the following content:

```Dockerfile
# Use an official Python runtime as a parent image
FROM python:3.9

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install the required dependencies
RUN pip install --no-cache-dir flask

# Run the Python application
CMD [ "python", "app.py" ]
```

Step 3: Build and Push the Docker Image
Build the Docker image and push it to a container registry accessible by your Minikube cluster. Replace `<your-registry>` with your actual container registry (e.g., Docker Hub, Google Container Registry, or Minikube's built-in Docker daemon):

```bash
docker build -t <your-registry>/flask-app:v1 .
docker push <your-registry>/flask-app:v1
```

Step 4: Create the Kubernetes Secret
Now, let's create a Kubernetes Secret to store the API key. Create a file named `api-key-secret.yaml` with the following content:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: api-key-secret
type: Opaque
data:
  api_key: BASE64_ENCODED_API_KEY
```

Replace `BASE64_ENCODED_API_KEY` with the base64-encoded value of your API key. You can encode the API key using the following command:

```bash
echo -n "your-api-key-here" | base64
```

Step 5: Deploy the Flask Application
Create a Kubernetes deployment to run the Flask application, using the Secret to inject the API key as an environment variable. Create a file named `flask-deployment.yaml` with the following content:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: <your-registry>/flask-app:v1
          ports:
            - containerPort: 8080
          env:
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: api-key-secret
                  key: api_key
```

Replace `<your-registry>` with your actual container registry where you pushed the Flask application image in Step 3.

Step 6: Deploy the Secrets and the Flask Application
Apply the Secret and Flask application deployment to your Minikube cluster:

```bash
kubectl apply -f api-key-secret.yaml
kubectl apply -f flask-deployment.yaml
```

Step 7: Expose the Flask Application
To access the Flask application from outside the cluster, we need to expose it using a Kubernetes Service. Create a file named `flask-service.yaml` with the following content:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - protocol: 'TCP'
      port: 80
      targetPort: 8080
  type: LoadBalancer
```

Apply the service to your Minikube cluster:

```bash
kubectl apply -f flask-service.yaml
```

Step 8: Access the Application
After a few moments, the service should be exposed with an external IP address. You can check it using:

```bash
minikube service flask-app-service --url
```

Access the Flask application using the external IP address:

```bash
curl <external-ip-address>
```

You should see the API key displayed in the response, which was retrieved from the Kubernetes Secret and injected into the Flask application using an environment variable.

That's it! You now have a Python Flask application deployed as a service on Minikube, with the sensitive API key stored securely in a Kubernetes Secret.